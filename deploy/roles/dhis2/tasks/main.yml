## Creating dhis2 instance(s)
- name: Creating instances 
  vars:
    ansible_connection: local
  community.general.lxd_container:
    name: "{{ item.name }}"
    state: started
    source:
      type: image
      mode: pull
      #server: https://images.linuxcontainers.org
      server: https://cloud-images.ubuntu.com/releases
      fingerprint: e3e1bd82cdc7
      protocol:  simplestreams
      #alias: ubuntu/{{ item.guestos | default('20.04')}}/amd64
    profiles: ["default"]
    wait_for_ipv4_addresses: true
    ignore_volatile_options: false
    timeout: 600
    devices:
      eth0:
        nictype: "{{ item.nictype | default ('bridged') }}"
        parent: "{{ item.network | default ('lxdbr0') }}"
        type: "{{ item.interface_type | default ('nic') }}"
        ipv4.address: "{{ item.ip_address | default(omit)}}"
        # ipv4.address: "{{ hostvars[item].ip_address }}" # here you could make use of host vars
  loop: "{{ instances }}"
  when: dhis2_setup_environment == "lxd"
  notify: Reload {{ proxy |capitalize }}

- block:
  - name: Get free address
    connection: local
    command:
      cmd: "lxc list -cn4 --format csv |awk -F '.' '/1[0-9]? / {print strtonum($4)}'"
    register: used_address
    tags: [ never ]

# a way to check if db is installed, 

- name: check posgresql Version
  become: yes
  become_user: postgres
  community.general.postgresql_info:
    filter: ver*,ext*
  register: postgresql_version_info
  delegate_to: postgres

# Check if database already exists, run only if database is installed 
- name: Check if dhis2.conf exists
  stat: path=/opt/dhis2/dhis.conf
  register: dhis2_conf
  loop: "{{ instances }}"
  delegate_to: "{{ item.name }}"

- debug: msg={{ item.stat.exists }}
  loop: "{{ dhis2_conf.results }}"

- name: Generate instance password
  set_fact:
    db_password: "{{ lookup('password', '/dev/null', seed=inventory_hostname) }}"
  when: not item.stat.exists
  loop: "{{ dhis2_conf.results }}"

- name: Create db role if it does not exist
  become: yes
  become_user: postgres
  community.general.postgresql_user:
    name: "{{ item.name }}"
    state: present
    password: "{{ db_password }}"
    # no_password_changes: yes
  when: 
    - item.createdb
    - db_password is defined

  loop: "{{ instances }}"
  delegate_to: postgres

# Creating instances databases
- name: "Creating instances databases"
  #connection: community.general.lxd
  become: yes
  become_user: postgres
  delegate_to: postgres
  community.postgresql.postgresql_db:
    name: "{{ item.name }}"
    state: present
    owner: "{{ item.name }}"
  with_items:
    - "{{ instances }}"

# Creating postgis extension
- name: Creating postgis extension
  #connection: community.general.lxd
  become: yes
  become_user: postgres
  community.postgresql.postgresql_ext:
    name: postgis
    db: "{{ item.name }}"
  loop: "{{ instances }}"
  delegate_to: postgres


# Fixing pg_hba.conf permissions
- name: Fixing pg_hba.conf permissions, allowing instances to connect
  #connection: community.general.lxd
  lineinfile:
    path: /etc/postgresql/{{ postgresql_version_info.version.major }}/main/pg_hba.conf
    insertafter: EOF
    line: "host    {{item.name}}    {{item.name}}    {{item.name}}.lxd    md5"
  loop:  "{{ instances }}"
  delegate_to: postgres
  notify: Reload Postgres
- meta: flush_handlers

# =============
# tomcat setup
# ============
- name:  installing java and tomcat 
  apt: 
    name:
      - openjdk-{{JAVA_VERSION}}-jre-headless
      - unzip
      - tomcat9
      - tomcat9-admin
      - ufw 
    update_cache: yes
    cache_valid_time: 3600
  delegate_to: "{{ item.name }}"
  loop: "{{ instances }}"
  
# Cleaning up webapps directory
- block: 
  - name: Clean /var/lib/tomcat9/webapps directory
    file:
      path: /var/lib/tomcat9/webapps/
      state: absent
    delegate_to: "{{ item.name }}"
    loop: "{{ instances }}"
# Creating application directories
- name: Creates webapps/instaced directories
  file:
    path:  /var/lib/tomcat9/webapps/{{item.name}}
    state: directory
  loop: "{{ instances }}"
  delegate_to: "{{ item.name }}"
  notify: Stop Tomcat
 
- name: Creating dhi2.conf directory 
  file:
    path: /opt/dhis2
    state: directory
    owner: tomcat 
    group: tomcat
    modification_time: preserve
    access_time: preserve
  delegate_to: "{{ item.name }}"
  loop: "{{ instances }}"
 
# Copy dhis2.conf to the instances 
- name: Copy dhis2.conf to the instances
  template:
    src: dhis.conf.j2
    dest: /opt/dhis2/dhis.conf
    mode: '0640'
    owner: root
    group: tomcat 
  delegate_to: "{{ item.name }}"
  loop: "{{ instances }}"
  when: db_password is defined
  ignore_errors: yes

# Creating /opt/glowroot directory
- name: Creating  /opt/glowroot directory
  file:
    path:  /opt/glowroot
    owner: tomcat
    group: tomcat
    state: directory
    modification_time: preserve
    access_time: preserve
  delegate_to: "{{ item.name }}"
  loop: "{{ instances }}"

# copy sever.xml config to the instances 
- name: Copy server.xml to the instances
  copy:
    src: server.xml
    dest: /etc/tomcat9/server.xml
    mode: '0640'
    owner: root
    group: tomcat
  delegate_to: "{{ item.name }}"
  loop: "{{ instances }}"

# setting up dhis2
- name: Copy setup template to intances. 
  #connection: community.general.lxd
  template:
    src: tomcat_setup.j2
    dest: /tmp/tomcat_setup.sh
    mode: '0700'
    owner: root
    group: root
  delegate_to: "{{ item.name }}" # ensuring its copied over to dhis2 instances only 
  loop: "{{ instances }}"

# Execute copied over tomcat_setup.sh script
- name: Execute tomcat_setup.sh script withing the containers
  shell:  /tmp/tomcat_setup.sh
  loop: "{{ instances }}"
  delegate_to: "{{ item.name }}"



# installs unzip withing the containers 
- name: Installing unzip, used to extract tomcat war files with the containers.
  delegate_to: "{{ item.name }}"
  apt:
    name: unzip
  loop: "{{ instances }}"
  
# Download and Extract dhis2 into the instances 
- name: Download and unurchive dhis2 file
  #connection: community.general.lxd
  delegate_to: "{{ item.name }}"
  ansible.builtin.unarchive:
    # src: "https://releases.dhis2.org/{{ version }}/dhis2-stable-latest.war"
    src: https://releases.dhis2.org/2.37/dhis2-stable-2.37.3.war
    dest: /var/lib/tomcat9/webapps/{{item.name}}
    remote_src: yes
  loop: "{{ instances }}"
  notify: Start Tomcat

# proxy configuration
- name: Deploy proxy block configuration
  include_tasks: "{{proxy}}.yml"
  when: proxy_is_enabled

