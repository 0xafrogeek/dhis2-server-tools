- name: check posgresql Version
  vars:
    ansible_host: "{{hostvars[inventory_hostname]['database_host'] if ansible_connection == 'lxd' else  hostvars[hostvars[inventory_hostname]['database_host']]['ansible_host']}}"
  become: yes
  become_user: postgres
  community.general.postgresql_info:
    filter: ver*,ext*
  register: postgresql_version_info
  delegate_to: "{{ hostvars[inventory_hostname]['database_host'] }}"
  when:  database_host is defined
  # put condition here   

# Check if database already exists, run only if database is installed 
- name: Check if dhis2.conf exists
  stat: path=/opt/dhis2/dhis.conf
  register: dhis2_conf
  when: inventory_hostname in groups['instances']

- name: Generate database password
  set_fact:
    db_password: "{{ lookup('password','/dev/null',seed=inventory_hostname) }}"
  when:
    - dhis2_conf.stat.exists is defined
    - not dhis2_conf.stat.exists 
    - inventory_hostname in groups['instances'] 

- name: Create instances database role
  vars:
    ansible_host: "{{hostvars[inventory_hostname]['database_host'] if ansible_connection == 'lxd' else  hostvars[hostvars[inventory_hostname]['database_host']]['ansible_host']}}"
  become: yes
  become_user: postgres
  community.general.postgresql_user:
    name:  "{{ inventory_hostname }}"
    state: present
    password: "{{ db_password }}"
  when: 
    - hostvars[inventory_hostname]['database_host'] is defined
    - db_password is defined
    - create_db | bool 
  delegate_to: "{{ hostvars[inventory_hostname]['database_host'] }}"
  notify: Reload Postgres 

# Creating instances databases
- name: Creating instances databases
  vars:
    ansible_host: "{{hostvars[inventory_hostname]['database_host'] if ansible_connection == 'lxd' else  hostvars[hostvars[inventory_hostname]['database_host']]['ansible_host']}}"
  become: yes
  become_user: postgres
  community.postgresql.postgresql_db:
    name: "{{ inventory_hostname }}"
    state: present
    owner: "{{ inventory_hostname }}"
  delegate_to: "{{ hostvars[inventory_hostname]['database_host'] }}"
  when: 
    - hostvars[inventory_hostname]['database_host'] is defined 
    - create_db | bool 


# Creating extensions
- name: Creating postgis,btree_gin and pg_trgm extensions
  vars:
    ansible_host: "{{hostvars[inventory_hostname]['database_host'] if ansible_connection == 'lxd' else  hostvars[hostvars[inventory_hostname]['database_host']]['ansible_host']}}"
  become: yes
  become_user: postgres
  community.postgresql.postgresql_ext:
    name: "{{ item }}"
    db: "{{ inventory_hostname }}"
  delegate_to: "{{ hostvars[inventory_hostname]['database_host'] }}"
  when:  
    - hostvars[inventory_hostname]['database_host'] is defined 
    - create_db | bool 
  loop: "{{ postgresql_extensions }}"

# Fixing pg_hba.conf permissions
- name: Fixing pg_hba.conf permissions, allowing instances to connect
  become: True
  vars:
     ansible_host: "{{ hostvars[inventory_hostname]['database_host'] if ansible_connection == 'lxd' else  hostvars[hostvars[inventory_hostname]['database_host']]['ansible_host']}}"
  lineinfile:
    path: /etc/postgresql/{{postgresql_version_info.version.major}}/main/pg_hba.conf
    insertafter: EOF
    line: "host    {{inventory_hostname}}   {{inventory_hostname}}  {{hostvars[inventory_hostname]['ansible_host']}}/32   md5"
  delegate_to: "{{ hostvars[inventory_hostname]['database_host'] }}"
  when:
    - database_host is defined
    - inventory_hostname in groups['instances']j
    - create_db | bool
  notify: Reload Postgres
  tags: [ never ]

# tomcat setup
- name:  installing java and tomcat  and zip 
  apt: 
    name:
      - openjdk-{{JAVA_VERSION}}-jre-headless
      - unzip
      - tomcat9
      - tomcat9-admin
      - ufw 
    update_cache: yes
    cache_valid_time: 3600
  when: inventory_hostname in groups['instances']
  
# Cleaning up webapps directory
- block: 
  - name: Clean /var/lib/tomcat9/webapps directory
    file:
      path: /var/lib/tomcat9/webapps/
      state: absent
  when: inventory_hostname in groups['instances']

# Creating application directories
- name: Creates webapps/instaced directories
  file:
    path:  /var/lib/tomcat9/webapps/{{ inventory_hostname }}
    state: directory
  notify: Stop Tomcat
  when: inventory_hostname in groups['instances']
 
- name: Creating dhi2.conf directory 
  file:
    path: /opt/dhis2
    state: directory
    owner: tomcat 
    # groups: tomcat
    modification_time: preserve
    access_time: preserve
  when: inventory_hostname in groups['instances']
 
# Copy dhis2.conf to the instances 
- name: Copy dhis2.conf to the instances
  template:
    src: dhis.conf.j2
    dest: /opt/dhis2/dhis.conf
    mode: '0640'
    owner: root
    group: tomcat 
  when: 
    - db_password is defined
    - inventory_hostname in groups['instances']
  ignore_errors: yes

# Creating /opt/glowroot directory
- name: Creating  /opt/glowroot directory
  file:
    path:  /opt/glowroot
    owner: tomcat
    group: tomcat
    state: directory
    modification_time: preserve
    access_time: preserve
  when:
    - inventory_hostname in groups['instances']
    - app_monitoring is defined
    - app_monitoring == "glowroot"

# copy sever.xml config to the instances 
- name: Copy server.xml to the instances
  ansible.builtin.copy:
    src: server.xml
    dest: /etc/tomcat9/server.xml
    mode: '0640'
    owner: root
    group: tomcat
  when: inventory_hostname in groups['instances']

# setting up dhis2
- name: Copy setup template to intances. 
  template:
    src: tomcat_setup.j2
    dest: /tmp/tomcat_setup.sh
    mode: '0700'
    owner: root
    group: root
  when: inventory_hostname in groups['instances']

# Copy dhis2 default configuration to the instances
- name: Copy dhis2 default configurations to the instances
  template:
    src: tomcat_default.j2
    dest: /etc/default/tomcat9
    mode: '0644'
  when: inventory_hostname in groups['instances']

# Enable tomcat glowroot monitoring 
- name: Enable tomcat glowroot monotoring on /etc/default/tomcat9
  lineinfile:
    path: /etc/default/tomcat9
    regexp: '^#? JAVA_OPTS="${JAVA_OPTS} -javaagent:/opt/glowroot/glowroot.jar"'
    line: 'JAVA_OPTS="${JAVA_OPTS} -javaagent:/opt/glowroot/glowroot.jar"'
  when: 
    - inventory_hostname in groups['instances'] 
    - app_monitoring is defined
    - app_monitoring == 'glowroot'
# Download and extrace glowroot
- name: Download and extract glowroot to /opt/glowroot diretory
  ansible.builtin.unarchive:
    src: https://github.com/glowroot/glowroot/releases/download/v0.13.6/glowroot-0.13.6-dist.zip
    dest: /opt/
    group: tomcat
    owner: tomcat
    remote_src: yes
  when:
    - inventory_hostname in groups['instances']
    - app_monitoring == 'glowroot'
    - app_monitoring is defined

- name: Copy glowroot configs to the instances
  template:
    src: glowroot_admin.json
    dest: /opt/glowroot/admin.json
    group: tomcat
    owner: tomcat
  when: 
    - inventory_hostname in groups['instances']
    - app_monitoring == 'glowroot'
    - app_monitoring is defined

# Execute copied over tomcat_setup.sh script
- name: Execute tomcat_setup.sh script withing the containers
  become: True
  become_user: root
  shell:  /tmp/tomcat_setup.sh
  when: inventory_hostname in groups['instances']
  
# Download and Extract dhis2 into the instances 
- name: Download and unarchive dhis2 file
  ansible.builtin.unarchive:
    src: https://releases.dhis2.org/2.37/dhis2-stable-2.37.3.war
    dest: /var/lib/tomcat9/webapps/{{inventory_hostname}}
    remote_src: yes
  notify: Start Tomcat
  when: inventory_hostname in groups['instances']


