---
# Consider adding a custom filter/test for this task
- name: Assert two instances under the same fqdn have unique Instance Names
  ansible.builtin.assert:
    that:
      - hostvars[item]['instance_name'] != hostvars[ansible_loop.nextitem]['instance_name']
    fail_msg: "Instances Names for {{ item }}: hostvars[item]['instance_name'] and {{ ansible_loop.nextitem }}: hostvars[item]['instance_name'] are the same"
  loop: "{{ groups['instances'] }}"
  loop_control:
    extended: true
    label: "{{ item }}"
  when:
    - ansible_loop.nextitem is defined
    - hostvars[item]['instance_name'] is defined and  hostvars[ansible_loop.nextitem]['instance_name'] is defined
    - hostvars[item]['fqdn'] is defined and hostvars[ansible_loop.nextitem]['fqdn'] is defined
    - hostvars[item]['fqdn'] == hostvars[ansible_loop.nextitem]['fqdn']

- name: Open http port 80
  community.general.ufw:
    rule: allow
    port: "{{ http_port | default('80') }}"
    proto: tcp
    comment: http
    state: enabled

- name: Open https port 443
  community.general.ufw:
    rule: allow
    port: "{{ https_port | default('443') }}"
    proto: tcp
    comment: https

- name: Ensure nginx is stopped and disabled.
  ansible.builtin.service:
    name: nginx
    enabled: false
    state: stopped
  register: unused_disable
  failed_when: unused_disable is failed and ('find' not in unused_disable.msg and 'found' not in unused_disable.msg)
  # ignore_errors: true

- name: Updating and Upgrading proxy
  ansible.builtin.apt:
    upgrade: "yes"
    update_cache: true
    cache_valid_time: 3600

- name: Installing apache2
  ansible.builtin.apt:
    update_cache: true
    cache_valid_time: 3600
    name:
      - apache2
      - libwww-perl # required for munin monitoring
    state: present

- name: Enabling apache2 modules
  community.general.apache2_module:
    name: "{{ item }}"
    state: present
  loop: "{{ ['ssl', 'cache', 'rewrite', 'proxy_http', 'headers'] }}"
  notify: Reload Apache2

- name: Remove default apache2 site
  ansible.builtin.file:
    path: /etc/apache2/sites-enabled/000-default.conf
    state: absent

- name: Include TLS configurarion tasks
  ansible.builtin.include_tasks: "{{ SSL_TYPE }}.yml"
  loop: "{{ groups['instances'] }}"
  when: hostvars[item]['fqdn'] is defined and hostvars[item]['fqdn'] != None and (hostvars[item]['fqdn'] | trim != "")

- name: Include self-signed TLS Certificate tasks, fqdn is not defined
  ansible.builtin.include_tasks: self-signed.yml
  loop: "{{ groups['instances'] }}"
  when: hostvars[item]['fqdn'] is undefined or hostvars[item]['fqdn'] == None or (not hostvars[item]['fqdn'] | trim != "")

- name: Find files to delete in /etc/apache2/conf.d/
  ansible.builtin.find:
    paths: /etc/apache2/sites-enabled/
    patterns: '*'
    file_type: link
    excludes: "{{ groups['instances'] | map('extract', hostvars, 'fqdn') | map('default', 'default') | map('regex_replace', '^\\s+|\\s+$', '')  | unique | map('regex_replace', '^$', 'default') | map('regex_replace', '(.+)', '\\1.conf') | list }}"
  register: found_files

- name: Clean /etc/apache2/sites-enabled/ directory
  ansible.builtin.file:
    path: "{{ item }}"
    state: absent
  loop: "{{ found_files['files'] | map(attribute='path') }}"

- name: Copy apache2 site configuration
  ansible.builtin.template:
    src: apache2/site.j2
    dest: /etc/apache2/sites-available/{{ hostvars[item]['fqdn'] | trim }}.conf
    owner: root
    group: root
    mode: "0644"
  loop: "{{ groups['instances'] }}"
  when: hostvars[item]['fqdn'] is defined and hostvars[item]['fqdn'] != None and (hostvars[item]['fqdn'] | trim != "")
  notify: Reload Apache2

- name: Default apache2 configuration, fqdn is not defined
  ansible.builtin.template:
    src: apache2/default.j2
    dest: /etc/apache2/sites-available/default.conf
    owner: root
    group: root
    mode: "0644"
  loop: "{{ groups['instances'] }}"
  when: hostvars[item]['fqdn'] is undefined or hostvars[item]['fqdn'] == None or (not hostvars[item]['fqdn'] | trim != "")
  notify: Reload Apache2

- name: Start apache2 service
  ansible.builtin.service:
    name: apache2
    state: started

- name: Enable apache2 site configuration
  ansible.builtin.command: a2ensite {{ hostvars[item]['fqdn'] | trim }}.conf
  args:
    creates: /etc/apache2/sites-enabled/{{  hostvars[item]['fqdn'] | trim }}.conf
  loop: "{{ groups['instances'] }}"
  when: hostvars[item]['fqdn'] is defined and hostvars[item]['fqdn'] != None and (hostvars[item]['fqdn'] | trim != "")
  notify: Reload Apache2

- name: Enable apache2 configuration, fqdn is not defined
  ansible.builtin.command: a2ensite default.conf
  args:
    creates: /etc/apache2/sites-enabled/default.conf
  loop: "{{ groups['instances'] }}"
  when: hostvars[item]['fqdn'] is undefined or hostvars[item]['fqdn'] == None or (not hostvars[item]['fqdn'] | trim != "")
  notify: Reload Apache2

- name: Create apache2 upstream directory
  ansible.builtin.file:
    path: /etc/apache2/upstream
    state: directory
    owner: root
    group: root
    mode: "0755"
  register: upstream_directory

- name: Instance location configuration
  ansible.builtin.template:
    src: apache2/instance.j2
    dest: /etc/apache2/upstream/{{ item | to_fixed_string }}.conf
    owner: root
    group: root
    mode: "0644"
  loop: "{{ groups['instances'] }}"
  notify: Reload Apache2

- name: Location configs | {{ server_monitoring }}
  ansible.builtin.template:
    src: apache2/{{ server_monitoring }}.j2
    dest: /etc/apache2/upstream/{{ server_monitoring }}.conf
    owner: root
    group: root
    mode: "0644"
  when: server_monitoring is defined
  notify: Reload Apache2

- name: Securing munin
  ansible.builtin.include_tasks: securing_munin.yml
  when: server_monitoring is defined and server_monitoring == 'munin'

- name: Flush Handlers
  ansible.builtin.meta: flush_handlers
