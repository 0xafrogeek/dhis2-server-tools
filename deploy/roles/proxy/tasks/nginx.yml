---
# tasks file for ./roles/proxy
## install nginx
- name: Install nginx
  apt: name=nginx update_cache=yes cache_valid_time=3600 state=latest 
  
# install certbot 
- name: Install certbot
  apt:
    name: certbot
    update_cache: yes
    cache_valid_time: 3600
    state: latest
  when: certbot_enabled | bool 

- name: create letsencrypt directory
  file: name=/var/www/letsencrypt state=directory

# Check if ther cert exists 
- name: Check if certificate already exists.
  stat:
    path: /etc/letsencrypt/live/{{ fqdn }}/cert.pem
  register: letsencrypt_cert
  tags: [ never ]

# Remove default nginx config
- name: Remove default nginx site 
  file: name=/etc/nginx/sites-enabled/default state=absent

#  Install nginx site for letsencrypt requests
- name: Install nginx site for letsencrypt requests
  template:
    src: templates/nginx-http.j2
    dest: /etc/nginx/sites-enabled/http
  when:
    # - not letsencrypt_cert.stat.exists
    - certbot_enabled | bool 
  notify: Reload Nginx

- name: Flush handlers
  meta: flush_handlers

# Generating TLS/SSL certificate with certbot
- name: Generate TLS/SSL Certificate with certbot
  # shell: certbot certonly -d {{fqdn}} --standalone -m {{email}} --agree-tos -n --no-eff-email
  shell: letsencrypt certonly -n --webroot -w /var/www/letsencrypt -m {{ email }} --agree-tos -d {{ fqdn }}
  args:
    creates: /etc/letsencrypt/live/{{ fqdn }}
  when: certbot_enabled | bool

# Generate dhparams 
- name: Generate dhparams
  shell: openssl dhparam -out /etc/nginx/dhparams.pem 2048
  args:
    creates: /etc/nginx/dhparams.pem

# Disabling nginx version show for security reasons 
- name: Disabling nginx version show
  lineinfile:
    dest: /etc/nginx/nginx.conf
    regex: '.*server_tokens off'
    line: "\tserver_tokens off;"
    insertafter: "types_hash_max_size"
  notify: Reload Nginx

# Coping nginx configuration to the proxy 
- block:
  - name: Check if nginx block config exists
    stat: path=/etc/nginx/sites-available/{{ fqdn }}
    register: site_config
  - name: Porting proxy nginx configuration
    template:
      src: site-config.j2
      dest: /etc/nginx/sites-available/{{fqdn}}
      owner: root
      group: root
      mode: 644
    when: not site_config.stat.exists

# Enable nginx configuration by creating a symlink
- name: Enable nginx configuration
  ansible.builtin.file:
    src: "/etc/nginx/sites-available/{{ fqdn }}"
    dest: "/etc/nginx/sites-enabled/{{ fqdn }}"
    state: link
    owner: root
    group: root
    mode: 0644
  notify: Reload Nginx
  
- name: Add letsencrypt cronjob for cert renewal
  cron:
    name: letsencrypt_renewal
    special_time: weekly
    job: letsencrypt --renew certonly -n --webroot -w /var/www/letsencrypt -m {{ email }} --agree-tos -d {{ fqdn }} && service nginx reload

