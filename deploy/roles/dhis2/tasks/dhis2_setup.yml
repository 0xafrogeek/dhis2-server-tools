---
# tomcat setup
- name:  installing java and tomcat  and zip 
  apt: > 
    name=openjdk-{{JAVA_VERSION}}-jre-headless,unzip,tomcat9,tomcat9-admin,ufw 
    update_cache=yes
    cache_valid_time=3600
  
# Cleaning up webapps directory
- block: 
  - name: Clean /var/lib/tomcat9/webapps directory
    file: path=/var/lib/tomcat9/webapps/ state=absent

# Creating application directories
- name: Creating webapps directories
  file: >
    path=/var/lib/tomcat9/webapps/{{inventory_hostname}} 
    state=directory
  notify: Stop Tomcat

 # Creating dhis2 configuration directory 
- name: Creating /opt/dhis2  directory 
  file: >
    path=/opt/dhis2 state=directory owner=tomcat
    modification_time=preserve access_time=preserve
 
# Copy dhis2.conf to the instances 
- name: Copy dhis2.conf to the instances
  template: >
    src=dhis.conf.j2 dest=/opt/dhis2/dhis.conf
    mode='0640' owner=root group=tomcat 
  when: db_password is defined
  ignore_errors: yes

# copy sever.xml config to the instances 
- name: Copy server.xml to the instances
  ansible.builtin.copy: >
    src=server.xml dest=/etc/tomcat9/server.xml
    mode='0640' owner=root group=tomcat

- name: Creating tomcat9.service.d  directory
  file: >
    owner=root group=root mode=0755
    path=/etc/systemd/system/tomcat9.service.d
    state=directory

- name: Create overrides file for tomcat9
  template:
    src: tomcat_overrides.j2
    dest: /etc/systemd/system/tomcat9.service.d/override.conf
    mode: '0644'
    owner: root
    group: root
  notify: Restart Tomcat

- name: Restrict tomcat user from running cron
  ansible.builtin.lineinfile: >
    path=/etc/cron.deny state=present create=yes
    line=tomcat owner=root group=root

- name: Restrict tomcat user from scheduling and running commands at later time
  ansible.builtin.lineinfile: >
    path=/etc/at.deny owner=root group=root
    state=present line=tomcat create=yes

# Copy dhis2 default configuration to the instances
- name: Copy dhis2 default configs
  ansible.builtin.template:
    src: tomcat_default.j2
    dest: /etc/default/tomcat9
    mode: '0644'
    owner: root 
    group: root

# Download and Extract dhis2 into the instances 
- name: Download and unarchive dhis2 file , remote_src 
  ansible.builtin.unarchive:
    src: "{{ dhis2_war_file }}"
    dest: /var/lib/tomcat9/webapps/{{inventory_hostname}}
    remote_src: yes
  notify: Start Tomcat
  when: dhis2_war_file | regex_search('(https:\/\/)')

- name: Deploy war dhis2 war file from a directory, local_src 
  ansible.builtin.unarchive:
    src: "{{ dhis2_war_file }}"
    dest: /var/lib/tomcat9/webapps/{{inventory_hostname}}
  when: dhis2_war_file | regex_search('^(?!.*?https:\/\/).*$')
  notify: Start Tomcat

# Firewall configuration
# Allow access from proxy  to tomcat port 8080
- name: Allow access to port 8080 from proxy
  community.general.ufw:
    rule: allow
    port: "{{ tomcat_port | default('8080')}}"
    src: "{{ hostvars[item]['ansible_host'] }}"
    proto: tcp
    state: enabled 
    comment: "tomcat access from the proxy"
  loop: "{{ groups['web'] }}"

# Allow port 4000 glowroot monitoring 
- name: Allow access to  port 4000 from proxy
  community.general.ufw:
    rule: allow
    port: "{{ glow_root_port | default('4000') }}"
    src: "{{ hostvars[item]['ansible_host'] }}"
    proto: tcp
    comment: Glowroot monitor access from proxy
    state: enabled 
  loop: "{{ groups['web'] }}"
  when: > 
    app_monitoring is defined and
    app_monitoring == "glowroot"

# allow port 4949 from munin server monitor
- name: Allow port 4949 from munin server monitor
  community.general.ufw:
    rule: allow
    port: "{{ munin_node_port | default('4949')}}"
    src: "{{ hostvars[item]['ansible_host'] }}"
    proto: tcp
    state: enabled
    comment: munin-node access from munin server
  loop: "{{ groups['monitoring'] }}"
  when: >
    server_monitoring is defined and 
    server_monitoring == "munin"

