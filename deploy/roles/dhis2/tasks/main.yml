# tasks file for ./roles/dhis2
# set up dhis2 on a container
# get free address 
#
#
# SET variables 
# PROXY_IP: 
# JAVA_VERSION
# You could use prompt module to get variables from the user. 

- block:
  - name: Get free address
    connection: local
    command:
      cmd: "lxc list -cn4 --format csv |awk -F '.' '/1[0-9]? / {print strtonum($4)}'"
    register: used_address
    tags: [ never ]

# Check if Postgres container exists
- name: Check if postgres container exists
  connection: community.general.lxd
  ping:
  delegate_to: postgres

# Ensure postgresql database is installed on posgresql containter, 
# NOTE: this will install the database if its not already installed. 

- name: Ensure postgres database is installed
  connection: community.general.lxd
  apt: 
    name: postgresql
    state: present
  delegate_to: postgres

- name: check posgresql Version
  connection: community.general.lxd
  become: yes
  become_user: postgres
  postgresql_info:
    filter: ver*,ext*
  register: postgresql_version_info
  delegate_to: postgres

# display posgresql version information
- name: Postgresql version info
  debug:
    msg: " Major: {{  postgresql_version_info.version.major }}, and Minor: {{ postgresql_version_info.version.minor }} "
    
# Check if database already exists, run only if database is installed 

- name: Generate instance password
  set_fact:
    instance_password: "{{ lookup('password', '/dev/null', seed=inventory_hostname) }}"

- name: Create db role if it does not exist
  become: yes
  become_user: postgres
  postgresql_user:
    name: "{{ item.name }}"
    state: present
    password: "{{ instance_password }}"
      #no_password_changes: yes
  when:  item.createdb
  with_items:
    - "{{ instances }}"
  delegate_to: postgres

# Creating instances databases
- name: "Creating instances databases"
  connection: community.general.lxd
  become: yes
  become_user: postgres
  delegate_to: postgres
  postgresql_db:
    name: "{{ item.name }}"
    state: present
    owner: "{{ item.name }}"
  with_items:
    - "{{ instances }}"

# Creating postgis extension
- name: Creating postgis extension
  connection: community.general.lxd
  become: yes
  become_user: postgres
  community.postgresql.postgresql_ext:
    name: postgis
    db: "{{ item.name }}"
  loop: "{{ instances }}"
  delegate_to: postgres

# Creating dhis2 instance(s)
- name: Creating instances 
  connection: local
  community.general.lxd_container:
    name: "{{ item.name }}"
    state: started
    source:
      type: image
      mode: pull
      server: https://images.linuxcontainers.org
      protocol:  simplestreams
      alias: ubuntu/{{ item.guestos | default('20.04')}}/amd64
    profiles: ["default"]
    wait_for_ipv4_addresses: true
    ignore_volatile_options: false
    timeout: 600
    devices:
      eth0:
        nictype: "{{ item.nictype | default ('bridged') }}"
        parent: "{{ item.network | default ('lxdbr0') }}"
        type: "{{ item.interface_type | default ('nic') }}"
        ipv4.address: "{{ item.ip_address | default(omit)}}"
        # ipv4.address: "{{ hostvars[item].ip_address }}" # here you could make use of host vars
  with_items:
    - "{{ instances }}"

# Fixing pg_hba.conf permissions
- name: Fixing pg_hba.conf permissions, allowing instances to connect
  connection: community.general.lxd
  lineinfile:
    path: /etc/postgresql/{{ postgresql_version_info.version.major }}/main/pg_hba.conf
    insertafter: EOF
    line: "host    {{item.name}}    {{item.name}}    {{item.name}}    md5"
  with_items:
    - "{{ instances }}"
  delegate_to: postgres

# setting up dhis2
- name: Copy setup template to intances. 
  connection: community.general.lxd
  template:
    src: tomcat_setup.j2
    dest: /tmp/tomcat_setup.sh
    mode: '0700'
    owner: root
    group: root
  delegate_to: "{{ item.name }}" # ensuring its copied over to dhis2 instances only 
  with_items:
    - "{{ instances }}"

# Execute copied over tomcat_setup.sh script
- name: Execute tomcat_setup.sh script withing the containers
  connection: community.general.lxd
  delegate_to: "{{ item.name }}"
  shell:  /tmp/tomcat_setup.sh
  with_items:
    - "{{ instances }}"
  tags: []

# Creating application directories
- name: Ensure instance(s) directory exists
  delegate_to: "{{ item.name }}"
  connection: community.general.lxd
  file:
    path:  /var/lib/tomcat9/webapps/{{item.name}}
    state: directory
  with_items: 
  - "{{ instances }}"
  notify: Stop Tomcat

# installs unzip withing the containers 
- name: Installing unzip, used to extract tomcat war files with the containers.
  delegate_to: "{{ item.name }}"
  connection: community.general.lxd
  apt:
    name: unzip
  with_items: 
  - "{{ instances }}"
    
# Download and Extract dhis2 into the instances 
- name: Download and unurchive dhis2 file
  connection: community.general.lxd
  delegate_to: "{{ item.name }}"
  ansible.builtin.unarchive:
    # src: "https://releases.dhis2.org/{{ version }}/dhis2-stable-latest.war"
    src: https://releases.dhis2.org/2.37/dhis2-stable-2.37.3.war
    dest: /var/lib/tomcat9/webapps/{{item.name}}
    remote_src: yes
  with_items:
    - "{{ instances }}"
  notify: Start Tomcat

# proxy configuration
- name: Deploy proxy configuration
  include_tasks: "{{proxy}}.yml"

